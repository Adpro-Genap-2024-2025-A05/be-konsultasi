name: CI/CD Pipeline

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: konsultasi_db
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out the Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Java toolchain
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Add gradlew permission
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/konsultasi_db
          SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest

      - name: Releasing New Version
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker stop postgres_db web_server || true
            docker rm postgres_db web_server || true
            
            docker rmi $(docker images -a -q) || true
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest
            
            cat > .env << EOL
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            EOL
            
            chmod 600 .env
            source .env
            
            docker network create app_network || true
            
            docker run -d \
              --name=postgres_db \
              --network=app_network \
              -p 5432:5432 \
              -v postgres_data:/var/lib/postgresql/data \
              -e POSTGRES_DB=konsultasi_db \
              -e POSTGRES_USER=${POSTGRES_USER} \
              -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
              --restart always \
              postgres:15-alpine
            
            docker run -d \
              --name=web_server \
              --network=app_network \
              -p 8080:8080 \
              -e POSTGRES_HOST=postgres_db \
              -e POSTGRES_PORT=5432 \
              -e POSTGRES_DB=konsultasi_db \
              -e POSTGRES_USER=${POSTGRES_USER} \
              -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
              --restart always \
              ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest
            
            docker ps
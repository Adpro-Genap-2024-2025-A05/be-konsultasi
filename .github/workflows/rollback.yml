name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Docker image version to rollback to (e.g., v20240125-abc1234)'
        required: true
        type: string
      environment:
        description: 'Environment to rollback'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      confirm_rollback:
        description: 'Type "CONFIRM" to proceed with rollback'
        required: true
        type: string

permissions:
  contents: read

jobs:
  validate-inputs:
    name: Validate Rollback Inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      proceed: ${{ steps.validate.outputs.proceed }}
    
    steps:
      - name: Validate inputs
        id: validate
        run: |
          if [ "${{ github.event.inputs.confirm_rollback }}" != "CONFIRM" ]; then
            echo "❌ Rollback confirmation failed. Please type 'CONFIRM' to proceed."
            exit 1
          fi
          
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^(v|dev-)[0-9]{8}-[a-f0-9]{7}$ ]]; then
            echo "❌ Invalid version format. Expected format: v20240125-abc1234 or dev-20240125-abc1234"
            exit 1
          fi
          
          echo "✅ Validation passed for version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "proceed=true" >> $GITHUB_OUTPUT

  check-image-exists:
    name: Verify Docker Image Exists
    needs: validate-inputs
    runs-on: ubuntu-latest
    if: needs.validate-inputs.outputs.proceed == 'true'
    
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Check if image exists
        run: |
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:$VERSION"
          
          echo "🔍 Checking if image exists: $IMAGE"
          
          if docker manifest inspect $IMAGE > /dev/null 2>&1; then
            echo "✅ Image found: $IMAGE"
          else
            echo "❌ Image not found: $IMAGE"
            echo "Available tags:"
            curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}/tags/?page_size=10" | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | head -10
            exit 1
          fi

  rollback:
    name: Execute Rollback
    needs: [validate-inputs, check-image-exists]
    runs-on: ubuntu-latest
    if: needs.validate-inputs.outputs.proceed == 'true'
    
    steps:
      - name: Create backup of current deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "📋 Creating backup of current deployment..."
            
            if [ -f .env ]; then
              CURRENT_VERSION=$(grep "CURRENT_VERSION=" .env | cut -d'=' -f2)
              echo "Current version: $CURRENT_VERSION"
              
              echo "BACKUP_VERSION=$CURRENT_VERSION" > .env.backup
              echo "BACKUP_DATE=$(date)" >> .env.backup
            else
              echo "No current version found"
            fi

      - name: Execute rollback deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            VERSION="${{ needs.validate-inputs.outputs.version }}"
            IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:$VERSION"
            
            echo "🔄 Starting rollback to version: $VERSION"
            
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            
            echo "📥 Pulling image: $IMAGE"
            docker pull $IMAGE
            
            echo "🛑 Stopping current containers..."
            docker stop web_server || true
            
            docker rm web_server || true
            
            cat > .env << EOL
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            AUTH_SERVICE_URL=${{ secrets.AUTH_SERVICE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CURRENT_VERSION=$VERSION
            ROLLBACK_DATE=$(date)
            EOL
            
            chmod 600 .env
            source .env
            
            docker network create app_network || true
            
            echo "🚀 Starting web server with version: $VERSION"
            docker run -d \
              --name=web_server \
              --network=app_network \
              -p 8080:8080 \
              -e POSTGRES_HOST=postgres_db \
              -e POSTGRES_PORT=5432 \
              -e POSTGRES_DB=konsultasi_db \
              -e POSTGRES_USER=${POSTGRES_USER} \
              -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
              --restart always \
              $IMAGE
            
            echo "⏳ Waiting for service to start..."
            sleep 10
            
            if docker ps | grep -q "web_server"; then
              echo "✅ Rollback successful! Service is running with version: $VERSION"
              docker ps
            else
              echo "❌ Rollback failed! Container is not running."
              docker logs web_server
              exit 1
            fi

  health-check:
    name: Post-Rollback Health Check
    needs: [validate-inputs, rollback]
    runs-on: ubuntu-latest
    if: needs.validate-inputs.outputs.proceed == 'true'
    
    steps:
      - name: Verify service health
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "🏥 Performing health check..."
            
            sleep 20
            
            if docker ps --filter "name=web_server" --filter "status=running" | grep -q web_server; then
              echo "✅ Container is running"
            else
              echo "❌ Container is not running"
              docker ps -a --filter "name=web_server"
              docker logs web_server
              exit 1
            fi
            
            echo "🔍 Testing service endpoint..."
            if curl -f -s http://localhost:8080/api; then
              echo "✅ Service is responding to HTTP requests"
            else
              echo "⚠️  Service might not be fully ready yet (this is sometimes normal)"
            fi
            
            echo "📊 Final status:"
            docker ps --filter "name=web_server"
            
            VERSION="${{ needs.validate-inputs.outputs.version }}"
            echo "🎉 Rollback to version $VERSION completed successfully!"

  notify-rollback:
    name: Notify Rollback Status
    needs: [validate-inputs, rollback, health-check]
    runs-on: ubuntu-latest
    if: always() && needs.validate-inputs.outputs.proceed == 'true'
    
    steps:
      - name: Create rollback summary
        run: |
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          ENV="${{ github.event.inputs.environment }}"
          
          if [ "${{ needs.health-check.result }}" == "success" ]; then
            STATUS="✅ SUCCESS"
            MESSAGE="Rollback to version $VERSION completed successfully"
          else
            STATUS="❌ FAILED"
            MESSAGE="Rollback to version $VERSION failed"
          fi
          
          echo "## Rollback Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** $STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** $ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Initiated by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$MESSAGE" >> $GITHUB_STEP_SUMMARY